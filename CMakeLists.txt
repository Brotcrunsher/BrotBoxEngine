cmake_minimum_required(VERSION 3.12.4 FATAL_ERROR)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(BBE_ADD_TEST_PROJECTS    ON CACHE BOOL "If set to OFF, the test projects are not added to the build.")
set(BBE_ADD_EXAMPLE_PROJECTS ON CACHE BOOL "If set to OFF, the example projects are not added to the build.")
set(BBE_ADD_AUDIO            ON CACHE BOOL "If set to OFF, all audio support is stripped from the engine.")
set(BBE_ADD_EXPERIMENTAL     OFF CACHE BOOL "If set to ON, Experimental projects are added.")
set(BBE_ADD_CURL             ON CACHE BOOL "If set to OFF, curl is not included.")

set(BBE_RENDER_MODE "Vulkan" CACHE STRING "Sets the render mode. Possible values are Vulkan, OpenGL, Emscripten, NullRenderer")

add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")
add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")

project(BrotBoxEngine CXX)
if(EMSCRIPTEN)
  set(CMAKE_EXECUTABLE_SUFFIX ".html")
  set(BBE_RENDER_MODE "Emscripten" CACHE STRING "" FORCE)
  set(BBE_ADD_CURL OFF CACHE BOOL "" FORCE)
  set(BBE_ADD_TEST_PROJECTS OFF CACHE BOOL "" FORCE)
  set(BBE_ADD_AUDIO OFF CACHE BOOL "" FORCE)
endif()

macro(install_compiled_shaders currProject)
  foreach(shader_path ${compiled_shaders})
    get_filename_component(shader ${shader_path} NAME)
    configure_file("${shader_path}" "${CMAKE_BINARY_DIR}/${currProject}/${shader}" COPYONLY)
  endforeach(shader_path)
endmacro()

macro(add_trivial_project name)
  add_compile_definitions(BBE_APPLICATION_ASSET_PATH="${CMAKE_CURRENT_SOURCE_DIR}")
  add_executable(${name})
  target_link_libraries(${name} BrotBoxEngine)
  file(GLOB local_src CONFIGURE_DEPENDS "*.cpp")
  target_sources(${name} PUBLIC "${local_src}")
  install_compiled_shaders(${name})
  target_include_directories(${name} PUBLIC .)
  if(EMSCRIPTEN)
    set_target_properties(${name} PROPERTIES LINK_FLAGS "-s USE_GLFW=3 -s FULL_ES3=1")
  endif()
endmacro()

add_library(BrotBoxEngine STATIC)
set_property(TARGET BrotBoxEngine PROPERTY CXX_STANDARD 17)
set_property(TARGET BrotBoxEngine PROPERTY CXX_STANDARD_REQUIRED ON)
set_property(TARGET BrotBoxEngine PROPERTY CXX_EXTENSIONS OFF)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  macro(add_cxx_linker_flag flag)
    target_compile_options(BrotBoxEngine PUBLIC "${flag}")
    target_link_libraries(BrotBoxEngine "${flag}")
  endmacro()
  
  message(STATUS "Adding sanitizers")
  add_cxx_linker_flag("-fsanitize=address")
  add_cxx_linker_flag("-fsanitize=pointer-compare")
  add_cxx_linker_flag("-fsanitize=pointer-subtract")
  add_cxx_linker_flag("-fsanitize=undefined")
  add_cxx_linker_flag("-fsanitize=integer-divide-by-zero")
  add_cxx_linker_flag("-fsanitize=unreachable")
  add_cxx_linker_flag("-fsanitize=vla-bound")
  add_cxx_linker_flag("-fsanitize=null")
  add_cxx_linker_flag("-fsanitize=return")
  add_cxx_linker_flag("-fsanitize=signed-integer-overflow")
  add_cxx_linker_flag("-fsanitize=bounds-strict")
  add_cxx_linker_flag("-fsanitize=enum")
  add_cxx_linker_flag("-fsanitize=bool")
  add_cxx_linker_flag("-fsanitize=vptr")
  add_cxx_linker_flag("-fsanitize=pointer-overflow")
  
  message(STATUS "Adding lcov flags")
  add_cxx_linker_flag("-fprofile-arcs")
  add_cxx_linker_flag("-ftest-coverage")
endif()

add_subdirectory(BrotBoxEngine)

if(BBE_RENDER_MODE STREQUAL "Vulkan")
  find_package(Vulkan REQUIRED)
  target_include_directories(BrotBoxEngine PUBLIC Vulkan::Vulkan)
  target_link_libraries(BrotBoxEngine Vulkan::Vulkan)
  target_compile_definitions(BrotBoxEngine PUBLIC GLFW_INCLUDE_VULKAN)
  target_compile_definitions(BrotBoxEngine PUBLIC BBE_RENDERER_VULKAN)
  target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/backends/imgui_impl_vulkan.cpp)
elseif(BBE_RENDER_MODE STREQUAL "OpenGL")
  add_subdirectory(Third-Party/glew-2.1.0/build/cmake)
  include_directories(Third-Party/glew-2.1.0/include)
  target_link_libraries(BrotBoxEngine glew_s)
  target_compile_definitions(BrotBoxEngine PUBLIC BBE_RENDERER_OPENGL)
elseif(BBE_RENDER_MODE STREQUAL "Emscripten")
  set_target_properties(BrotBoxEngine PROPERTIES LINK_FLAGS "-s USE_GLFW=3 -s FULL_ES3=1")
  target_compile_definitions(BrotBoxEngine PUBLIC BBE_RENDERER_OPENGL)
elseif(BBE_RENDER_MODE STREQUAL "NullRenderer")
  target_compile_definitions(BrotBoxEngine PUBLIC BBE_RENDERER_NULL)
else()
  message(FATAL_ERROR "Unknown BBE_RENDER_MODE: ${BBE_RENDER_MODE}")
endif()

target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/backends/imgui_impl_glfw.cpp)

if(EMSCRIPTEN)
else()
  add_subdirectory(Third-Party/glfw-3.3.2)
  include_directories(Third-Party/glfw-3.3.2/include)
  target_link_libraries(BrotBoxEngine glfw ${GLFW_LIBRARIES})
endif()

target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/imgui.cpp)
target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/imgui_draw.cpp)
target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/imgui_demo.cpp)
target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/imgui_widgets.cpp)
target_include_directories(BrotBoxEngine PUBLIC Third-Party/imgui-master)
target_include_directories(BrotBoxEngine PUBLIC Third-Party/imgui-master/backends)

set(BOX2D_BUILD_UNIT_TESTS OFF CACHE BOOL "" FORCE)
set(BOX2D_BUILD_TESTBED OFF CACHE BOOL "" FORCE)
add_subdirectory(Third-Party/box2d-master)
include_directories(Third-Party/box2d-master/include)
target_link_libraries(BrotBoxEngine box2d)
set_target_properties(box2d PROPERTIES FOLDER box2d)

if(BBE_ADD_CURL)
  set(BUILD_CURL_EXE OFF CACHE BOOL "" FORCE)
  set(CURL_DISABLE_TESTS ON CACHE BOOL "" FORCE)
  if(WIN32)
    set(CMAKE_USE_SCHANNEL ON CACHE BOOL "" FORCE)
  endif()
  add_subdirectory(Third-Party/curl-7.77.0)
  target_link_libraries(BrotBoxEngine libcurl)
  include_directories(Third-Party/curl-7.77.0/include)
  target_compile_definitions(BrotBoxEngine PUBLIC BBE_ADD_CURL)
endif()

if(BBE_ADD_AUDIO)
  if(WIN32)
    add_subdirectory("Third-Party/portaudio")
  else()
    link_directories("${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/portaudio/_Build")
  endif()
  
  include_directories(Third-Party/portaudio/include)
  target_link_libraries(BrotBoxEngine portaudio portaudio_static)
else()
  add_compile_definitions(BBE_NO_AUDIO)
endif()

target_include_directories(BrotBoxEngine PUBLIC "Third-Party/stb")
target_include_directories(BrotBoxEngine PUBLIC "Third-Party/minimp3")

if(BBE_ADD_TEST_PROJECTS)
  add_subdirectory(Tests)
endif()
if(BBE_ADD_EXAMPLE_PROJECTS)
  add_subdirectory(Examples)
endif()

