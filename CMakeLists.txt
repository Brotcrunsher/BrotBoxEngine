cmake_minimum_required(VERSION 3.12.4 FATAL_ERROR)

add_compile_definitions(BBE_ENGINE_ASSET_PATH="${CMAKE_CURRENT_SOURCE_DIR}/BrotBoxEngine")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")
add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")

project(BrotBoxEngine CXX)

macro(install_compiled_shaders currProject)
  foreach(shader_path ${compiled_shaders})
    get_filename_component(shader ${shader_path} NAME)
    configure_file("${shader_path}" "${CMAKE_BINARY_DIR}/${currProject}/${shader}" COPYONLY)
  endforeach(shader_path)
endmacro()

macro(add_trivial_project name)
  add_compile_definitions(BBE_APPLICATION_ASSET_PATH="${CMAKE_CURRENT_SOURCE_DIR}")
  add_executable(${name})
  target_link_libraries(${name} BrotBoxEngine)
  file(GLOB local_src CONFIGURE_DEPENDS "*.cpp")
  target_sources(${name} PUBLIC "${local_src}")
  install_compiled_shaders(${name})
  target_include_directories(${name} PUBLIC .)
endmacro()

add_library(BrotBoxEngine STATIC)
set_property(TARGET BrotBoxEngine PROPERTY CXX_STANDARD 17)
set_property(TARGET BrotBoxEngine PROPERTY CXX_STANDARD_REQUIRED ON)
set_property(TARGET BrotBoxEngine PROPERTY CXX_EXTENSIONS OFF)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  macro(add_cxx_linker_flag flag)
    target_compile_options(BrotBoxEngine PUBLIC "${flag}")
    target_link_libraries(BrotBoxEngine "${flag}")
  endmacro()
  
  message(STATUS "Adding sanitizers")
  add_cxx_linker_flag("-fsanitize=address")
  add_cxx_linker_flag("-fsanitize=pointer-compare")
  add_cxx_linker_flag("-fsanitize=pointer-subtract")
  add_cxx_linker_flag("-fsanitize=undefined")
  add_cxx_linker_flag("-fsanitize=integer-divide-by-zero")
  add_cxx_linker_flag("-fsanitize=unreachable")
  add_cxx_linker_flag("-fsanitize=vla-bound")
  add_cxx_linker_flag("-fsanitize=null")
  add_cxx_linker_flag("-fsanitize=return")
  add_cxx_linker_flag("-fsanitize=signed-integer-overflow")
  add_cxx_linker_flag("-fsanitize=bounds-strict")
  add_cxx_linker_flag("-fsanitize=enum")
  add_cxx_linker_flag("-fsanitize=bool")
  add_cxx_linker_flag("-fsanitize=vptr")
  add_cxx_linker_flag("-fsanitize=pointer-overflow")
  
  message(STATUS "Adding lcov flags")
  add_cxx_linker_flag("-fprofile-arcs")
  add_cxx_linker_flag("-ftest-coverage")
endif()

find_package(Vulkan REQUIRED)
target_include_directories(BrotBoxEngine PUBLIC Vulkan::Vulkan)
target_link_libraries(BrotBoxEngine Vulkan::Vulkan)

add_subdirectory(BrotBoxEngine)

add_subdirectory(Third-Party/glfw-3.3.2)
include_directories(Third-Party/glfw-3.3.2/include)
target_link_libraries(BrotBoxEngine glfw ${GLFW_LIBRARIES})

target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/backends/imgui_impl_glfw.cpp)
target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/backends/imgui_impl_vulkan.cpp)
target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/imgui.cpp)
target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/imgui_draw.cpp)
target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/imgui_demo.cpp)
target_sources(BrotBoxEngine PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/imgui-master/imgui_widgets.cpp)
include_directories(Third-Party/imgui-master)
include_directories(Third-Party/imgui-master/backends)

add_subdirectory(Third-Party/box2d-master)
include_directories(Third-Party/box2d-master/include)
target_link_libraries(BrotBoxEngine box2d)
set_target_properties(box2d glad imgui sajson testbed unit_test PROPERTIES FOLDER box2d)

if(WIN32)
  add_subdirectory("Third-Party/portaudio")
else()
  link_directories("${CMAKE_CURRENT_SOURCE_DIR}/Third-Party/portaudio/_Build")
endif()

include_directories(Third-Party/portaudio/include)
target_link_libraries(BrotBoxEngine portaudio portaudio_static)

target_include_directories(BrotBoxEngine PUBLIC "Third-Party/stb")
target_include_directories(BrotBoxEngine PUBLIC "Third-Party/minimp3")

add_subdirectory(BrotBoxEngineTest)
add_subdirectory(BrotBoxEngineGTest)
add_subdirectory(Example3D)
add_subdirectory(ExampleTerrain)
add_subdirectory(ExampleMandelbrot)
add_subdirectory(ExampleMandelbrotShader)
add_subdirectory(ExampleParticleGravity)
add_subdirectory(ExampleSnake)
add_subdirectory(ExampleSnake3D)
add_subdirectory(ExampleSound)
add_subdirectory(ExampleCurves)
add_subdirectory(ExampleFlowField)
add_subdirectory(ExampleTextRendering)
add_subdirectory(ExampleBalloonGame)
add_subdirectory(ExampleSandGame)
add_subdirectory(ExampleSignedDistanceField)
add_subdirectory(Example2DPhysicsBallPit)
add_subdirectory(Example2DPhysicsChainReaction)
add_subdirectory(ExampleStreamCountdown)
add_subdirectory(ExampleTemplate)

