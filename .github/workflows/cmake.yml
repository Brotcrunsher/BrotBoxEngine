name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        renderer: [Vulkan, OpenGL, NullRenderer]
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Dependencies
      run: sudo sed -i 's/azure\.//' /etc/apt/sources.list 
           && sudo apt-get update 
           && sudo apt-get install --fix-missing -y 
              libxinerama-dev 
              freeglut3-dev 
              libvulkan-dev 
              libdmx-dev 
              xorg-dev openssl
     
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBBE_RENDER_MODE=${{matrix.renderer}}
   
    - name: Build Port Audio
      working-directory: ${{github.workspace}}/Third-Party/portaudio
      run: mkdir _Build
           && cd _Build
           && cmake .. -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/opt
           && make
           && make install

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build/bin
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./BrotBoxEngineGTest && ./BrotBoxEngineTest


  build_emscripten:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Dependencies
      run: sudo sed -i 's/azure\.//' /etc/apt/sources.list 
           && sudo apt-get update 
           && sudo apt-get install --fix-missing -y 
              libxinerama-dev 
              freeglut3-dev 
              libvulkan-dev 
              libdmx-dev 
              xorg-dev
              openssl
              python3
              git
              cmake
    
    - name: Install Emscripten
      run: git clone https://github.com/emscripten-core/emsdk.git
           && cd emsdk
           && git pull
           && ./emsdk install latest
           && ./emsdk activate latest
           && source ./emsdk_env.sh
           && cd ..
           && emcmake cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
           && emcmake cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

